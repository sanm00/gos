package logger

import (
	"os"
	"path/filepath"

	"github.com/sirupsen/logrus"
)

// Fields 类型用于结构化日志字段
type Fields logrus.Fields

var log = logrus.New()

// Setup 初始化日志配置
func Setup(level, format, output string, fileConfig *FileConfig) {
	// 设置日志级别
	logLevel, err := logrus.ParseLevel(level)
	if err != nil {
		log.Warnf("Invalid log level %s, using default: info", level)
		logLevel = logrus.InfoLevel
	}
	log.SetLevel(logLevel)

	// 设置日志格式
	switch format {
	case "json":
		log.SetFormatter(&logrus.JSONFormatter{
			TimestampFormat: "2006-01-02 15:04:05",
		})
	case "text":
		log.SetFormatter(&logrus.TextFormatter{
			FullTimestamp:   true,
			TimestampFormat: "2006-01-02 15:04:05",
		})
	default:
		log.Warnf("Invalid log format %s, using default: json", format)
		log.SetFormatter(&logrus.JSONFormatter{
			TimestampFormat: "2006-01-02 15:04:05",
		})
	}

	// 设置日志输出
	if output != "stdout" && fileConfig != nil {
		setupFileOutput(output, fileConfig)
	}
}

// FileConfig 文件日志配置
type FileConfig struct {
	Path       string
	MaxSize    int
	MaxAge     int
	MaxBackups int
}

func setupFileOutput(output string, config *FileConfig) {
	// 确保日志目录存在
	err := os.MkdirAll(filepath.Dir(output), 0755)
	if err != nil {
		log.Warnf("Failed to create log directory: %v", err)
		return
	}

	// 打开日志文件
	file, err := os.OpenFile(output, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Warnf("Failed to open log file: %v", err)
		return
	}

	log.SetOutput(file)
}

// WithFields 创建带有字段的日志条目
func WithFields(fields Fields) *logrus.Entry {
	return log.WithFields(logrus.Fields(fields))
}

// Debug 输出调试日志
func Debug(args ...interface{}) {
	log.Debug(args...)
}

// Debugf 输出格式化的调试日志
func Debugf(format string, args ...interface{}) {
	log.Debugf(format, args...)
}

// Info 输出信息日志
func Info(args ...interface{}) {
	log.Info(args...)
}

// Infof 输出格式化的信息日志
func Infof(format string, args ...interface{}) {
	log.Infof(format, args...)
}

// Warn 输出警告日志
func Warn(args ...interface{}) {
	log.Warn(args...)
}

// Warnf 输出格式化的警告日志
func Warnf(format string, args ...interface{}) {
	log.Warnf(format, args...)
}

// Error 输出错误日志
func Error(args ...interface{}) {
	log.Error(args...)
}

// Errorf 输出格式化的错误日志
func Errorf(format string, args ...interface{}) {
	log.Errorf(format, args...)
}

// Fatal 输出致命错误日志
func Fatal(args ...interface{}) {
	log.Fatal(args...)
}

// Fatalf 输出格式化的致命错误日志
func Fatalf(format string, args ...interface{}) {
	log.Fatalf(format, args...)
}
