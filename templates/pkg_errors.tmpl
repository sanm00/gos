package errors

import (
	"fmt"
	"net/http"
)

// AppError 应用错误
type AppError struct {
	Code    int    // 错误码
	Message string // 错误信息
	Err     error  // 原始错误
}

// Error 实现 error 接口
func (e *AppError) Error() string {
	if e.Err != nil {
		return fmt.Sprintf("%s: %v", e.Message, e.Err)
	}
	return e.Message
}

// NewAppError 创建应用错误
func NewAppError(code int, message string, err error) *AppError {
	return &AppError{
		Code:    code,
		Message: message,
		Err:     err,
	}
}

// 预定义错误
var (
	ErrNotFound     = NewAppError(http.StatusNotFound, "Resource not found", nil)
	ErrBadRequest   = NewAppError(http.StatusBadRequest, "Bad request", nil)
	ErrUnauthorized = NewAppError(http.StatusUnauthorized, "Unauthorized", nil)
	ErrForbidden    = NewAppError(http.StatusForbidden, "Forbidden", nil)
	ErrInternal     = NewAppError(http.StatusInternalServerError, "Internal server error", nil)
)
