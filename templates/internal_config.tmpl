package configs

import (
	"fmt"
	"os"
	"sync"

	"gopkg.in/yaml.v3"
)

var (
	config *Config
	once   sync.Once
)

// Config 总配置结构
type Config struct {
	Server   ServerConfig   `yaml:"server"`
	Log      LogConfig     `yaml:"log"`
	Database DatabaseConfig `yaml:"database"`
	Redis    RedisConfig   `yaml:"redis"`
}

// ServerConfig 服务器配置
type ServerConfig struct {
	Port int    `yaml:"port"`
	Mode string `yaml:"mode"`
}

// LogConfig 日志配置
type LogConfig struct {
	Level  string   `yaml:"level"`
	Format string   `yaml:"format"`
	Output string   `yaml:"output"`
	File   FileLog  `yaml:"file"`
}

// FileLog 文件日志配置
type FileLog struct {
	Path       string `yaml:"path"`
	MaxSize    int    `yaml:"max_size"`
	MaxAge     int    `yaml:"max_age"`
	MaxBackups int    `yaml:"max_backups"`
}

// DatabaseConfig 数据库配置
type DatabaseConfig struct {
	Driver          string `yaml:"driver"`
	Host            string `yaml:"host"`
	Port            int    `yaml:"port"`
	Username        string `yaml:"username"`
	Password        string `yaml:"password"`
	DBName          string `yaml:"dbname"`
	MaxOpenConns    int    `yaml:"max_open_conns"`
	MaxIdleConns    int    `yaml:"max_idle_conns"`
	ConnMaxLifetime int    `yaml:"conn_max_lifetime"`
}

// RedisConfig Redis配置
type RedisConfig struct {
	Host     string `yaml:"host"`
	Port     int    `yaml:"port"`
	Password string `yaml:"password"`
	DB       int    `yaml:"db"`
	PoolSize int    `yaml:"pool_size"`
}

// Load 加载配置文件
func Load(configPath string) (*Config, error) {
	once.Do(func() {
		config = &Config{}
		if err := loadConfig(configPath, config); err != nil {
			panic(fmt.Sprintf("加载配置文件失败: %v", err))
		}
	})
	return config, nil
}

// GetConfig 获取配置实例
func GetConfig() *Config {
	if config == nil {
		panic("配置未初始化")
	}
	return config
}

func loadConfig(configPath string, cfg *Config) error {
	// 读取配置文件
	data, err := os.ReadFile(configPath)
	if err != nil {
		return fmt.Errorf("读取配置文件失败: %w", err)
	}

	// 解析YAML
	err = yaml.Unmarshal(data, cfg)
	if err != nil {
		return fmt.Errorf("解析配置文件失败: %w", err)
	}

	return nil
}
